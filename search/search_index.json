{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is configlayer?","text":"<p>configlayer enables you to easily read, compose and manage your application configuration.</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>You load your configuration from various sources, including environment variables, dot files, json, yaml, toml, ini files or the AWS Systems Manager Parameter Store into <code>Layer</code>s. These are <code>dict</code> compatible custom classes that provide two additional core features:</p> <ol> <li> <p>Layers <code>a</code>, <code>b</code> can be combined with <code>a / b</code>, where mappings in <code>a</code> take precedence over those in <code>b</code>. The left layer takes precendence over the right layer. A KeyError will occur if no Layer contains the given key. </p> </li> <li> <p>You can call <code>Layer</code>s, giving you the handy <code>layer(key: str, cast=None, default=undefined)</code> interface. See examples below.</p> </li> </ol>"},{"location":"#installation","title":"Installation","text":"<p>Most data sources can be imported with no dependencies outside the python standard library. Some data sources require additional dependencies you can optionally install with the bracket <code>[]</code> notation.  <pre><code># support environment variables, dotfiles, ini-files and JSON\npip install configlayer\n\n# and support YAML\npip install configlayer[yaml]\n\n# and support TOML in Python &lt; 3.11; part of stdlib for &gt;=3.11\npip install configlayer[toml]\n\n# and support AWS SSM\npip install configlayer[ssm]\n\n# and support multiple, e. g. AWS SSM and YAML\npip install configlayer[ssm,yaml]\n</code></pre></p>"},{"location":"#examples","title":"Examples","text":"<pre><code>from configlayer import Layer, Secret, comma\ndefaults = Layer({\n\"S3_BUCKET\": \"some-bucket-name\"\n\"TIMEOUT\": \"3600\",\n\"ALLOWED_HOSTS\": \"http://localhost,https://frontend.com\"\n})\nenv = Layer.from_env()\nfile = Layer.from_env_file(\".env\")\nconfig = file / env / defaults\nif config.get(\"CI\", False):\ntestenv = Layer.from_env_file(\".testing.env\")\nconfig = testenv / config\nS3_BUCKET = config[\"S3_BUCKET\"]\nTIMEOUT = config(\"TIMEOUT\", cast=int) # equivalent to int(config[\"TIMEOUT\"])\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", cast=CommaSeparatedStrings)\nRDS_SECRET = config(\"RDS_SECRET\", cast=Secret)\nOAUTH_SECRET = config(\"OAUTH_SECRET\", cast=Secret)\n</code></pre> <p>Interact with it like normal dict, e. g.  <pre><code>for k, v in config:\n    print(k, v)\n</code></pre></p>"}]}